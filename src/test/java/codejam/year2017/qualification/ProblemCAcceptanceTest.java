package codejam.year2017.qualification;

import static org.junit.Assert.*;

import java.util.*;

import org.junit.*;

import codejam.*;
import codejam.year2017.qualification.c.*;

@Ignore
public class ProblemCAcceptanceTest {
	private Application<CProblem, CResult> tested;
	private List<String> input;
	private List<String> result;

	@Before
	public void setup() {
		tested = new Application<>(new CReader(), BathroomPlanner::new, new OutputWriter());
	}

	@Test
	public void sample() {
		arrangeInput("5", "4 2", "5 2", "6 2", "1000 1000", "1000 1");
		act();
		assertResult("Case #1: 1 0", "Case #2: 1 0", "Case #3: 1 1", "Case #4: 0 0", "Case #5: 500 499");
	}

	@Test
	public void smallPractice() {
		arrangeInput("100", "4 2", "5 2", "6 2", "1000 1000", "1000 1", "485 425", "500 245", "352 291", "825 628",
				"500 78", "796 786", "999 499", "999 127", "999 503", "1000 511", "633 478", "581 437", "3 1",
				"325 301", "1000 489", "500 249", "569 517", "999 255", "1000 256", "519 516", "999 512", "999 497",
				"992 959", "500 499", "999 488", "999 2", "497 435", "500 215", "500 255", "1 1", "343 300", "820 802",
				"1000 499", "999 487", "999 999", "652 503", "752 619", "999 498", "1000 127", "500 128", "500 1",
				"500 256", "999 427", "500 500", "478 469", "259 199", "295 245", "1000 255", "999 1", "500 127",
				"452 373", "985 949", "999 998", "500 248", "1000 2", "500 250", "854 770", "802 601", "315 308",
				"418 414", "935 915", "500 2", "500 244", "941 756", "370 358", "476 405", "2 2", "520 494", "1000 128",
				"2 1", "1000 488", "853 749", "999 128", "1000 512", "4 1", "256 230", "889 803", "1000 999", "999 511",
				"5 1", "1000 498", "500 116", "440 344", "1000 442", "855 850", "1000 500", "999 256", "3 2", "386 380",
				"451 363", "500 117", "533 521", "756 642", "843 726", "662 605");
		act();
		assertResult("Case #1: 1 0", "Case #2: 1 0", "Case #3: 1 1", "Case #4: 0 0", "Case #5: 500 499", "Case #6: 0 0",
				"Case #7: 1 0", "Case #8: 0 0", "Case #9: 0 0", "Case #10: 3 3", "Case #11: 0 0", "Case #12: 1 0",
				"Case #13: 7 6", "Case #14: 1 0", "Case #15: 1 0", "Case #16: 0 0", "Case #17: 0 0", "Case #18: 1 1",
				"Case #19: 0 0", "Case #20: 1 0", "Case #21: 1 0", "Case #22: 0 0", "Case #23: 3 2", "Case #24: 1 1",
				"Case #25: 0 0", "Case #26: 0 0", "Case #27: 1 0", "Case #28: 0 0", "Case #29: 0 0", "Case #30: 1 0",
				"Case #31: 249 249", "Case #32: 0 0", "Case #33: 1 1", "Case #34: 1 0", "Case #35: 0 0",
				"Case #36: 0 0", "Case #37: 0 0", "Case #38: 1 0", "Case #39: 1 1", "Case #40: 0 0", "Case #41: 0 0",
				"Case #42: 0 0", "Case #43: 1 0", "Case #44: 7 6", "Case #45: 1 1", "Case #46: 250 249",
				"Case #47: 0 0", "Case #48: 1 1", "Case #49: 0 0", "Case #50: 0 0", "Case #51: 0 0", "Case #52: 0 0",
				"Case #53: 3 2", "Case #54: 499 499", "Case #55: 3 2", "Case #56: 0 0", "Case #57: 0 0",
				"Case #58: 0 0", "Case #59: 1 0", "Case #60: 250 249", "Case #61: 1 0", "Case #62: 0 0",
				"Case #63: 0 0", "Case #64: 0 0", "Case #65: 0 0", "Case #66: 0 0", "Case #67: 125 124",
				"Case #68: 1 1", "Case #69: 0 0", "Case #70: 0 0", "Case #71: 0 0", "Case #72: 0 0", "Case #73: 0 0",
				"Case #74: 3 3", "Case #75: 1 0", "Case #76: 1 1", "Case #77: 0 0", "Case #78: 3 3", "Case #79: 0 0",
				"Case #80: 2 1", "Case #81: 0 0", "Case #82: 0 0", "Case #83: 0 0", "Case #84: 1 0", "Case #85: 2 2",
				"Case #86: 1 0", "Case #87: 3 3", "Case #88: 0 0", "Case #89: 1 1", "Case #90: 0 0", "Case #91: 1 0",
				"Case #92: 1 1", "Case #93: 0 0", "Case #94: 0 0", "Case #95: 0 0", "Case #96: 3 2", "Case #97: 0 0",
				"Case #98: 0 0", "Case #99: 0 0", "Case #100: 0 0");
	}

	@Test
	public void smallPractice2() {
		arrangeInput("100", "4 2", "5 2", "6 2", "1000 1000", "1000 1", "949792 714292", "1000000 499998",
				"891476 818518", "500000 262143", "500000 237856", "264744 234245", "500000 1", "1000000 1000000",
				"854838 706592", "999999 505763", "1000000 475713", "494959 471175", "477115 475297", "288907 271880",
				"999999 128", "1000000 500000", "3 2", "999999 1", "270333 254796", "1000000 475712", "999999 127",
				"633911 497124", "500000 131072", "3 1", "1000000 128", "1000000 2", "973446 751500", "984463 918347",
				"317717 256230", "1000000 499999", "628213 616543", "1000000 524288", "586142 492481", "999999 499999",
				"1000000 1", "999999 999999", "744628 638050", "999999 262144", "942895 867083", "448626 366865",
				"500000 237857", "1000000 999999", "999999 499997", "999999 2", "1000000 127", "1000000 432558",
				"999999 524288", "500000 499999", "314584 264447", "999999 262143", "999999 475711", "1000000 523819",
				"500000 243204", "999999 499998", "500000 2", "708220 598371", "558585 420639", "936500 776178",
				"986127 984765", "486919 432443", "4 1", "500000 127", "2 1", "500000 249999", "500000 131071",
				"780505 685564", "500000 500000", "938305 893779", "500000 128", "999999 419746", "500000 210868",
				"999999 475712", "5 1", "999999 524287", "711948 612854", "500000 250000", "1000000 262144",
				"999999 999998", "900230 711441", "697315 554890", "500000 262144", "550404 430008", "1000000 262143",
				"470996 392214", "1000000 524287", "962880 746640", "2 2", "500000 249998", "637871 526820",
				"632066 599601", "1 1", "958179 733144", "413549 393771", "730378 704011", "910033 850693");
		act();
		assertResult("Case #1: 1 0", "Case #2: 1 0", "Case #3: 1 1", "Case #4: 0 0", "Case #5: 500 499", "Case #6: 0 0",
				"Case #7: 1 0", "Case #8: 0 0", "Case #9: 1 0", "Case #10: 1 1", "Case #11: 0 0",
				"Case #12: 250000 249999", "Case #13: 0 0", "Case #14: 0 0", "Case #15: 1 0", "Case #16: 1 0",
				"Case #17: 0 0", "Case #18: 0 0", "Case #19: 0 0", "Case #20: 3906 3905", "Case #21: 1 0",
				"Case #22: 0 0", "Case #23: 499999 499999", "Case #24: 0 0", "Case #25: 1 1", "Case #26: 7812 7811",
				"Case #27: 0 0", "Case #28: 1 1", "Case #29: 1 1", "Case #30: 3906 3905", "Case #31: 250000 249999",
				"Case #32: 0 0", "Case #33: 0 0", "Case #34: 0 0", "Case #35: 1 0", "Case #36: 0 0", "Case #37: 0 0",
				"Case #38: 0 0", "Case #39: 1 0", "Case #40: 500000 499999", "Case #41: 0 0", "Case #42: 0 0",
				"Case #43: 1 1", "Case #44: 0 0", "Case #45: 0 0", "Case #46: 1 0", "Case #47: 0 0", "Case #48: 1 0",
				"Case #49: 249999 249999", "Case #50: 7812 7811", "Case #51: 1 1", "Case #52: 0 0", "Case #53: 0 0",
				"Case #54: 0 0", "Case #55: 3 2", "Case #56: 1 1", "Case #57: 1 0", "Case #58: 1 0", "Case #59: 1 0",
				"Case #60: 125000 124999", "Case #61: 0 0", "Case #62: 0 0", "Case #63: 0 0", "Case #64: 0 0",
				"Case #65: 0 0", "Case #66: 2 1", "Case #67: 3905 3905", "Case #68: 1 0", "Case #69: 1 0",
				"Case #70: 3 2", "Case #71: 0 0", "Case #72: 0 0", "Case #73: 0 0", "Case #74: 1953 1952",
				"Case #75: 1 1", "Case #76: 1 1", "Case #77: 1 0", "Case #78: 2 2", "Case #79: 1 0", "Case #80: 0 0",
				"Case #81: 1 0", "Case #82: 1 1", "Case #83: 0 0", "Case #84: 0 0", "Case #85: 0 0", "Case #86: 0 0",
				"Case #87: 0 0", "Case #88: 3 2", "Case #89: 0 0", "Case #90: 1 0", "Case #91: 0 0", "Case #92: 0 0",
				"Case #93: 1 0", "Case #94: 0 0", "Case #95: 0 0", "Case #96: 0 0", "Case #97: 0 0", "Case #98: 0 0",
				"Case #99: 0 0", "Case #100: 0 0");
	}

	@Test
	@Ignore("Performance to weak!")
	public void largePractice() {
		arrangeInput("100", "4 2", "5 2", "6 2", "1000 1000", "1000 1", "500000000000000000 249999999999999999",
				"1000000000000000000 500000000000000000", "999999999999999999 423539247696576511", "3 2",
				"500000000000000000 144115188075855872", "1000000000000000000 1",
				"500000000000000000 288230376151711743", "500000000000000000 249999999999999998", "1 1",
				"500000000000000000 1", "999999999999999999 576460752303423487",
				"500000000000000000 144115188075855871", "1000000000000000000 2", "3 1",
				"1000000000000000000 399183725730293449", "873309107078573157 851976531965116124",
				"585760340027663524 581099224598866145", "870100249904674276 769518619292060461",
				"1000000000000000000 423539247696576512", "500000000000000000 2",
				"1000000000000000000 1000000000000000000", "999999999999999999 999999999999999998",
				"949274056015286408 807500214784773280", "999999999999999999 403930300029886817",
				"500000000000000000 211769623848288256", "840072972595600864 718176248883769641",
				"999999999999999999 423539247696576512", "1000000000000000000 127", "999999999999999999 2",
				"416407871401756170 351898098174462150", "999999999999999999 499999999999999998",
				"1000000000000000000 499999999999999998", "2 2", "472763863683535383 361381331096253760",
				"304944716032023666 247305904498592937", "1000000000000000000 576460752303423488",
				"1000000000000000000 288230376151711743", "4 1", "699930361278684534 592912314607216971",
				"1000000000000000000 423539247696576513", "500000000000000000 500000000000000000",
				"999999999999999999 576460752303423488", "561747139456337108 555644121080440564",
				"999999999999999999 499999999999999997", "937680825673347759 796132733881305670",
				"1000000000000000000 288230376151711744", "500000000000000000 141932481001550261", "2 1",
				"999999999999999999 127", "660090250346031183 616566760573448196", "999999999999999999 128",
				"500000000000000000 211769623848288257", "999999999999999999 288230376151711744",
				"500000000000000000 204140119122773217", "437726532442854338 364042886741040349",
				"1000000000000000000 284872099388915157", "572209370934137006 543385235223631378",
				"1000000000000000000 128", "500000000000000000 217302440639268485",
				"1000000000000000000 999999999999999999", "500000000000000000 250000000000000000",
				"999999999999999999 1", "715665411333797537 661098237399127760",
				"685374303840178430 523043308995917115", "966316187604576125 871298714402182862",
				"654565251581449094 572265827025412186", "1000000000000000000 499999999999999999",
				"1000000000000000000 576460752303423487", "526615610306187810 474437867894251481", "5 1",
				"596958440772108214 460190380232043893", "508124771705411312 433200242288987011",
				"920248680058038165 806596990732773246", "500000000000000000 288230376151711744",
				"797572546408518771 692559451499996211", "999999999999999999 528332129927347903",
				"500000000000000000 128", "490647352522905448 483027390212853846",
				"366633848859111292 326278824739890730", "999999999999999999 288230376151711743",
				"287722564158777742 249250986600580845", "820269355774935802 721103772257795482",
				"999999999999999999 499999999999999999", "1000000000000000000 566978777245772063",
				"500000000000000000 127", "999999999999999999 281756288642574284",
				"500000000000000000 499999999999999999", "561123808224342011 501322504023465268",
				"954811098888955643 859794142691090836", "376499148875729451 345168368014170114",
				"999999999999999999 999999999999999999", "818350057598471143 676526463450842185",
				"810529814585660739 745895520457231373", "708089485103988730 536999786777083471",
				"650701937524199729 556692397629582053");
		act();
		assertResult();
	}

	private void assertResult(String... expected) {
		assertEquals(Arrays.asList(expected), result);
	}

	private void arrangeInput(String... content) {
		input = Arrays.asList(content);
	}

	private void act() {
		result = tested.analyse(input);
	}
}
